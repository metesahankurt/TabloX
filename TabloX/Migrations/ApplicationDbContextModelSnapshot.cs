// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TabloX.Data;

#nullable disable

namespace TabloX.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TabloX.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArtistBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsArtist")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa3ebd16-c769-4c19-a12c-f9ce064b71e1",
                            Email = "monet@example.com",
                            EmailConfirmed = true,
                            FirstName = "Claude",
                            IsArtist = true,
                            LastName = "Monet",
                            LockoutEnabled = false,
                            NormalizedEmail = "MONET@EXAMPLE.COM",
                            NormalizedUserName = "MONET@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0c86cd1-87d6-4749-a302-55c14b6e9b87",
                            TwoFactorEnabled = false,
                            UserName = "monet@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "004cdb71-7282-450e-a3a3-5c65d1446c6d",
                            Email = "vangogh@example.com",
                            EmailConfirmed = true,
                            FirstName = "Vincent",
                            IsArtist = true,
                            LastName = "van Gogh",
                            LockoutEnabled = false,
                            NormalizedEmail = "VANGOGH@EXAMPLE.COM",
                            NormalizedUserName = "VANGOGH@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49dd3478-011f-45f9-b351-bd9dac84717e",
                            TwoFactorEnabled = false,
                            UserName = "vangogh@example.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63c88307-42b9-4795-abff-731c49766191",
                            Email = "renoir@example.com",
                            EmailConfirmed = true,
                            FirstName = "Pierre-Auguste",
                            IsArtist = true,
                            LastName = "Renoir",
                            LockoutEnabled = false,
                            NormalizedEmail = "RENOIR@EXAMPLE.COM",
                            NormalizedUserName = "RENOIR@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed6b8542-a4cf-45f5-8e97-6e15a99fe929",
                            TwoFactorEnabled = false,
                            UserName = "renoir@example.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5bd07b11-0ebd-4025-8f0d-9d94a6be2af3",
                            Email = "degas@example.com",
                            EmailConfirmed = true,
                            FirstName = "Edgar",
                            IsArtist = true,
                            LastName = "Degas",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEGAS@EXAMPLE.COM",
                            NormalizedUserName = "DEGAS@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63f08308-aa0c-430a-971f-3aacb9b35873",
                            TwoFactorEnabled = false,
                            UserName = "degas@example.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba8f4618-ee13-4486-beb5-e75e6929ef63",
                            Email = "cezanne@example.com",
                            EmailConfirmed = true,
                            FirstName = "Paul",
                            IsArtist = true,
                            LastName = "Cézanne",
                            LockoutEnabled = false,
                            NormalizedEmail = "CEZANNE@EXAMPLE.COM",
                            NormalizedUserName = "CEZANNE@EXAMPLE.COM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "832fa0d8-11de-4f79-82b6-9fcc2002dc4a",
                            TwoFactorEnabled = false,
                            UserName = "cezanne@example.com"
                        });
                });

            modelBuilder.Entity("TabloX.Models.ArtistProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ArtistProfiles");
                });

            modelBuilder.Entity("TabloX.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("TabloX.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("TabloX.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Empresyonist akım eserleri",
                            Name = "Empresyonist"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Post-Empresyonist akım eserleri",
                            Name = "Post-Empresyonist"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Realist akım eserleri",
                            Name = "Realist"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Romantik akım eserleri",
                            Name = "Romantik"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Sembolist akım eserleri",
                            Name = "Sembolist"
                        });
                });

            modelBuilder.Entity("TabloX.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpiryDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TabloX.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("TabloX.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArtistId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ArtistProfileId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("ArtistProfileId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtistId = "1",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 4, 6, 23, 57, 33, 805, DateTimeKind.Local).AddTicks(7662),
                            Description = "Monet'nin ünlü nilüfer serilerinden etkileyici bir eser",
                            ImageUrl = "/images/artworks/water_lilies.jpg",
                            Price = 2300.00m,
                            Title = "Water Lilies"
                        },
                        new
                        {
                            Id = 2,
                            ArtistId = "1",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 4, 6, 23, 57, 33, 805, DateTimeKind.Local).AddTicks(7664),
                            Description = "Empresyonizm akımına adını veren eser",
                            ImageUrl = "/images/artworks/impression_sunrise.jpg",
                            Price = 2500.00m,
                            Title = "Impression, Sunrise"
                        },
                        new
                        {
                            Id = 3,
                            ArtistId = "1",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 4, 6, 23, 57, 33, 805, DateTimeKind.Local).AddTicks(7667),
                            Description = "Seine nehri üzerindeki köprünün empresyonist yorumu",
                            ImageUrl = "/images/artworks/bridge_argenteuil.jpg",
                            Price = 2200.00m,
                            Title = "Bridge at Argenteuil"
                        },
                        new
                        {
                            Id = 4,
                            ArtistId = "2",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 4, 6, 23, 57, 33, 805, DateTimeKind.Local).AddTicks(7669),
                            Description = "Van Gogh'un en ünlü eserlerinden biri",
                            ImageUrl = "/images/artworks/starry_night.jpg",
                            Price = 3000.00m,
                            Title = "The Starry Night"
                        },
                        new
                        {
                            Id = 5,
                            ArtistId = "2",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 4, 6, 23, 57, 33, 805, DateTimeKind.Local).AddTicks(7671),
                            Description = "Ünlü ayçiçeği serisi",
                            ImageUrl = "/images/artworks/sunflowers.jpg",
                            Price = 2800.00m,
                            Title = "Sunflowers"
                        },
                        new
                        {
                            Id = 6,
                            ArtistId = "2",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 4, 6, 23, 57, 33, 805, DateTimeKind.Local).AddTicks(7673),
                            Description = "Buğday tarlası ve servi ağaçlarının muhteşem uyumu",
                            ImageUrl = "/images/artworks/wheat_field_cypresses.jpg",
                            Price = 2600.00m,
                            Title = "Wheat Field with Cypresses"
                        },
                        new
                        {
                            Id = 7,
                            ArtistId = "3",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 4, 6, 23, 57, 33, 805, DateTimeKind.Local).AddTicks(7723),
                            Description = "Seine nehri kıyısında öğle yemeği sahnesi",
                            ImageUrl = "/images/artworks/luncheon_boating.jpg",
                            Price = 2700.00m,
                            Title = "Luncheon of the Boating Party"
                        },
                        new
                        {
                            Id = 8,
                            ArtistId = "3",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 4, 6, 23, 57, 33, 805, DateTimeKind.Local).AddTicks(7726),
                            Description = "Paris'te bir dans partisi sahnesi",
                            ImageUrl = "/images/artworks/moulin_galette.jpg",
                            Price = 2600.00m,
                            Title = "Dance at the Moulin de la Galette"
                        },
                        new
                        {
                            Id = 9,
                            ArtistId = "3",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 4, 6, 23, 57, 33, 805, DateTimeKind.Local).AddTicks(7730),
                            Description = "Tiyatro locasında bir sahne",
                            ImageUrl = "/images/artworks/theater_box.jpg",
                            Price = 2400.00m,
                            Title = "The Theater Box"
                        },
                        new
                        {
                            Id = 10,
                            ArtistId = "4",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 4, 6, 23, 57, 33, 805, DateTimeKind.Local).AddTicks(7732),
                            Description = "Degas'nın ünlü bale sınıfı serisi",
                            ImageUrl = "/images/artworks/ballet_class.jpg",
                            Price = 2500.00m,
                            Title = "The Ballet Class"
                        },
                        new
                        {
                            Id = 11,
                            ArtistId = "4",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 4, 6, 23, 57, 33, 805, DateTimeKind.Local).AddTicks(7734),
                            Description = "Paris cafe yaşamından bir kesit",
                            ImageUrl = "/images/artworks/absinthe.jpg",
                            Price = 2300.00m,
                            Title = "L'Absinthe"
                        },
                        new
                        {
                            Id = 12,
                            ArtistId = "4",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 4, 6, 23, 57, 33, 805, DateTimeKind.Local).AddTicks(7736),
                            Description = "At yarışı sahnesi",
                            ImageUrl = "/images/artworks/race_horses.jpg",
                            Price = 2400.00m,
                            Title = "Race Horses"
                        },
                        new
                        {
                            Id = 13,
                            ArtistId = "5",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 4, 6, 23, 57, 33, 805, DateTimeKind.Local).AddTicks(7738),
                            Description = "Kağıt oynayanlar serisi",
                            ImageUrl = "/images/artworks/card_players.jpg",
                            Price = 2800.00m,
                            Title = "The Card Players"
                        },
                        new
                        {
                            Id = 14,
                            ArtistId = "5",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 4, 6, 23, 57, 33, 805, DateTimeKind.Local).AddTicks(7740),
                            Description = "Elmalı natürmort",
                            ImageUrl = "/images/artworks/still_life_apples.jpg",
                            Price = 2500.00m,
                            Title = "Still Life with Apples"
                        },
                        new
                        {
                            Id = 15,
                            ArtistId = "5",
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 4, 6, 23, 57, 33, 805, DateTimeKind.Local).AddTicks(7742),
                            Description = "Sainte-Victoire Dağı manzarası",
                            ImageUrl = "/images/artworks/mont_sainte_victoire.jpg",
                            Price = 2600.00m,
                            Title = "Mont Sainte-Victoire"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TabloX.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TabloX.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TabloX.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TabloX.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TabloX.Models.ArtistProfile", b =>
                {
                    b.HasOne("TabloX.Models.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("TabloX.Models.ArtistProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TabloX.Models.Cart", b =>
                {
                    b.HasOne("TabloX.Models.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("TabloX.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TabloX.Models.CartItem", b =>
                {
                    b.HasOne("TabloX.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TabloX.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TabloX.Models.Order", b =>
                {
                    b.HasOne("TabloX.Models.ApplicationUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("TabloX.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TabloX.Models.OrderItem", b =>
                {
                    b.HasOne("TabloX.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TabloX.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TabloX.Models.Product", b =>
                {
                    b.HasOne("TabloX.Models.ApplicationUser", null)
                        .WithMany("Products")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("TabloX.Models.ApplicationUser", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TabloX.Models.ArtistProfile", null)
                        .WithMany("Products")
                        .HasForeignKey("ArtistProfileId");

                    b.HasOne("TabloX.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TabloX.Models.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("TabloX.Models.ArtistProfile", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TabloX.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("TabloX.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TabloX.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
