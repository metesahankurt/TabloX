@model TabloX2.Models.CheckoutViewModel
@{
    ViewData["Title"] = "Satƒ±n Alma";
    var cartItems = ViewBag.CartItems as List<TabloX2.Models.CartItem>;
    var totalAmount = ViewBag.TotalAmount;
    var discountAmount = ViewBag.DiscountAmount;
    var finalAmount = ViewBag.FinalAmount;
    string formAction = (ViewBag.DirectBuy == true && cartItems != null && cartItems.Count == 1)
        ? Url.Action("Checkout", "Orders", new { artworkId = cartItems[0].ArtworkId })
        : Url.Action("Checkout", "Orders");
}

<style>
    .payment-section {
        display: none;
    }

    .payment-section.active {
        display: block;
        animation: fadeInSection 0.3s ease-in-out;
    }

    @@keyframes fadeInSection {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .input-group-text {
        background-color: #fff;
        border-left: none;
        padding: 0.375rem 0.75rem;
    }

    .card-brand-image {
        height: 24px;
        width: auto;
        display: none;
    }

    .payment-icon {
        width: 24px;
        height: 24px;
        margin-right: 8px;
        vertical-align: middle;
    }

    .form-select {
        padding-left: 40px;
        width: 100%;
        height: calc(1.5em + 0.75rem + 2px);
        appearance: auto;
    }

    .installment-select {
        padding-left: 12px;
        background-position: right 0.75rem center;
        background-size: 16px 12px;
    }

    .card {
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .card-number-input {
        border-right: none;
    }

    .card-brand-container {
        min-width: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .card-brand {
        display: none;
        font-size: 24px;
    }

    .card-brand.visa {
        color: #1A1F71;
    }

    .card-brand.mastercard {
        color: #EB001B;
    }

    .card-brand.amex {
        color: #006FCF;
    }

    .card-brand.generic {
        color: #6c757d;
    }
</style>

<div class="container py-4">
    <h2 class="mb-4">Satƒ±n Alma</h2>

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <ul class="mb-0">
                @foreach (var modelError in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <li>@modelError.ErrorMessage</li>
                }
            </ul>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <div class="col-md-6">
            <form method="post" id="checkoutForm" action="@formAction">
                @Html.AntiForgeryToken()
                @if (ViewBag.DirectBuy == true && cartItems != null && cartItems.Count == 1)
                {
                    <input type="hidden" name="artworkId" value="@cartItems[0].ArtworkId" />
                }

                <div asp-validation-summary="All" class="text-danger"></div>

                <div class="form-group mb-4">
                    <label asp-for="PaymentMethod" class="form-label">√ñdeme Y√∂ntemi</label>
                    <select asp-for="PaymentMethod" class="form-select" id="PaymentMethod">
                        <option value="CreditCard">üí≥ Kredi Kartƒ±</option>
                        <option value="BankTransfer">üè¶ Havale/EFT</option>
                        <option value="CryptoCurrency">‚Çø Kripto Para</option>
                        <option value="GiftCard">üéÅ Hediye Kartƒ±</option>
                    </select>
                    <span asp-validation-for="PaymentMethod" class="text-danger"></span>
                </div>

                <!-- Kredi Kartƒ± B√∂l√ºm√º -->
                <div id="CreditCardSection" class="payment-section">
                    <div class="card p-3 mb-3">
                        <h5 class="mb-3">üí≥ Kredi Kartƒ± Bilgileri</h5>
                        <div class="form-group">
                            <label asp-for="CardNumber">Kart Numarasƒ±</label>
                            <div class="input-group">
                                <input asp-for="CardNumber" class="form-control card-number-input" id="CardNumber" maxlength="19" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢" />
                                <span class="input-group-text card-brand-container">
                                    <i class="card-brand visa fa-brands fa-cc-visa"></i>
                                    <i class="card-brand mastercard fa-brands fa-cc-mastercard"></i>
                                    <i class="card-brand amex fa-brands fa-cc-amex"></i>
                                    <i class="card-brand generic fa-regular fa-credit-card"></i>
                                </span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6">
                                <div class="form-group">
                                    <label asp-for="Expiry">Son Kullanma</label>
                                    <input asp-for="Expiry" class="form-control" id="Expiry" placeholder="AA/YY" maxlength="5" />
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="form-group">
                                    <label asp-for="CVV">CVV</label>
                                    <input asp-for="CVV" class="form-control" id="CVV" maxlength="4" placeholder="‚Ä¢‚Ä¢‚Ä¢" />
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label asp-for="CardHolder">Kart √úzerindeki ƒ∞sim</label>
                            <input asp-for="CardHolder" class="form-control" id="CardHolder" />
                        </div>
                        <div class="form-group">
                            <label asp-for="InstallmentCount">Taksit</label>
                            <select asp-for="InstallmentCount" class="form-select installment-select">
                                <option value="1">Tek √áekim</option>
                                <option value="2">2 Taksit</option>
                                <option value="3">3 Taksit</option>
                                <option value="6">6 Taksit</option>
                                <option value="9">9 Taksit</option>
                                <option value="12">12 Taksit</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Havale/EFT B√∂l√ºm√º -->
                <div id="BankTransferSection" class="payment-section">
                    <div class="card p-3 mb-3">
                        <h5 class="mb-3">üè¶ Havale/EFT Bilgileri</h5>
                        <div class="alert alert-info">
                            <strong>Banka Hesap Bilgileri:</strong><br/>
                            Banka: √ñrnek Bank<br/>
                            IBAN: TR12 3456 7890 1234 5678 9012 34<br/>
                            Hesap Sahibi: TabloX2 Sanat Galerisi
                        </div>
                        <div class="form-group">
                            <label asp-for="BankAccountNumber">G√∂nderici IBAN</label>
                            <input asp-for="BankAccountNumber" class="form-control" id="BankAccountNumber" 
                                   placeholder="TR12 3456 7890 1234 5678 9012 34"
                                   pattern="TR\d{2}\s\d{4}\s\d{4}\s\d{4}\s\d{4}\s\d{4}\s\d{2}"
                                   maxlength="32" />
                        </div>
                    </div>
                </div>

                <!-- Kripto Para B√∂l√ºm√º -->
                <div id="CryptoCurrencySection" class="payment-section">
                    <div class="card p-3 mb-3">
                        <h5 class="mb-3">‚Çø Kripto Para Bilgileri</h5>
                        <div class="alert alert-info">
                            <strong>Kripto C√ºzdan Adresleri:</strong><br/>
                            BTC: bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh<br/>
                            ETH: 0x71C7656EC7ab88b098defB751B7401B5f6d8976F
                        </div>
                        <div class="form-group">
                            <label asp-for="CryptoWalletAddress">G√∂nderici C√ºzdan Adresi</label>
                            <input asp-for="CryptoWalletAddress" class="form-control" id="CryptoWalletAddress" />
                        </div>
                    </div>
                </div>

                <!-- Hediye Kartƒ± B√∂l√ºm√º -->
                <div id="GiftCardSection" class="payment-section">
                    <div class="card p-3 mb-3">
                        <h5 class="mb-3">üéÅ Hediye Kartƒ±</h5>
                        <div class="form-group">
                            <label asp-for="GiftCardCode">Hediye Kartƒ± Kodu</label>
                            <input asp-for="GiftCardCode" class="form-control" id="GiftCardCode" 
                                   placeholder="XXXX-XXXX-XXXX-XXXX"
                                   pattern="[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}"
                                   maxlength="19" />
                            <small class="text-muted">√ñrnek: GIFT-X100-2024-FULL</small>
                        </div>
                    </div>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="ShippingAddress" class="form-label">Kargo Adresi</label>
                    <textarea asp-for="ShippingAddress" class="form-control" rows="3" required minlength="10"></textarea>
                    <span asp-validation-for="ShippingAddress" class="text-danger"></span>
                </div>

                <div class="form-group mb-4">
                    <label asp-for="CouponCode" class="form-label">ƒ∞ndirim Kodu</label>
                    <input asp-for="CouponCode" class="form-control" placeholder="Varsa indirim kodunuz" />
                    <span asp-validation-for="CouponCode" class="text-danger"></span>
                </div>

                <button type="submit" class="btn btn-success btn-lg w-100" id="submitButton">
                    Satƒ±n Al
                </button>
            </form>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">Sepet √ñzeti</h4>
                </div>
                <div class="card-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Eser</th>
                                <th>Adet</th>
                                <th class="text-end">Fiyat</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in cartItems)
                            {
                                <tr>
                                    <td>@item.Artwork.Title</td>
                                    <td>@item.Quantity</td>
                                    <td class="text-end">@item.Artwork.Price.ToString("C")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="text-end">
                        <div class="mb-2">
                            <strong>Toplam:</strong> 
                            <span class="fs-5">@totalAmount.ToString("C")</span>
                        </div>
                        @if (discountAmount > 0)
                        {
                            <div class="mb-2 text-success">
                                <strong>ƒ∞ndirim:</strong> 
                                <span class="fs-5">-@discountAmount.ToString("C")</span>
                            </div>
                        }
                        <div class="mb-2">
                            <strong>√ñdenecek Tutar:</strong> 
                            <span class="fs-4 text-success">@finalAmount.ToString("C")</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const paymentMethodSelect = document.getElementById('PaymentMethod');
            const paymentSections = document.querySelectorAll('.payment-section');
            const cardNumberInput = document.getElementById('CardNumber');
            const cardBrands = document.querySelectorAll('.card-brand');
            const expiryInput = document.getElementById('Expiry');
            const cvvInput = document.getElementById('CVV');
            const form = document.querySelector('form');

            // ƒ∞lk y√ºkleme i√ßin √∂deme y√∂ntemini g√ºncelle
            updatePaymentSection(paymentMethodSelect.value);

            // √ñdeme y√∂ntemi deƒüi≈ütiƒüinde
            paymentMethodSelect.addEventListener('change', function() {
                updatePaymentSection(this.value);
            });

            function updatePaymentSection(selectedMethod) {
                // T√ºm b√∂l√ºmleri gizle
                paymentSections.forEach(section => {
                    section.classList.remove('active');
                });

                // Se√ßilen b√∂l√ºm√º g√∂ster
                const selectedSection = document.querySelector(`#${selectedMethod}Section`);
                if (selectedSection) {
                    selectedSection.classList.add('active');
                }

                // Form validasyonunu g√ºncelle
                updateFormValidation(selectedMethod);
            }

            function updateFormValidation(selectedMethod) {
                // T√ºm required alanlarƒ± kaldƒ±r
                form.querySelectorAll('[required]').forEach(input => {
                    input.removeAttribute('required');
                });

                // Se√ßilen √∂deme y√∂ntemine g√∂re required alanlarƒ± ekle
                if (selectedMethod === 'CreditCard') {
                    document.getElementById('CardNumber').setAttribute('required', '');
                    document.getElementById('Expiry').setAttribute('required', '');
                    document.getElementById('CVV').setAttribute('required', '');
                    document.getElementById('CardHolder').setAttribute('required', '');
                } else if (selectedMethod === 'BankTransfer') {
                    document.getElementById('BankAccountNumber').setAttribute('required', '');
                } else if (selectedMethod === 'CryptoCurrency') {
                    document.getElementById('CryptoWalletAddress').setAttribute('required', '');
                } else if (selectedMethod === 'GiftCard') {
                    document.getElementById('GiftCardCode').setAttribute('required', '');
                }
            }

            // Kredi kartƒ± numarasƒ± formatlamasƒ±
            if (cardNumberInput) {
                cardNumberInput.addEventListener('input', function(e) {
                    let value = e.target.value.replace(/\D/g, '');
                    let formattedValue = '';
                    
                    for (let i = 0; i < value.length; i++) {
                        if (i > 0 && i % 4 === 0) {
                            formattedValue += ' ';
                        }
                        formattedValue += value[i];
                    }
                    
                    e.target.value = formattedValue;

                    // Kart markasƒ± logosunu g√ºncelle
                    updateCardBrand(value);
                });
            }

            // Kart markasƒ±nƒ± g√ºncelle
            function updateCardBrand(cardNumber) {
                // T√ºm logolarƒ± gizle
                cardBrands.forEach(brand => brand.style.display = 'none');

                if (!cardNumber) {
                    document.querySelector('.card-brand.generic').style.display = 'block';
                    return;
                }

                // Kart numarasƒ±nƒ±n ilk karakterine g√∂re kart markasƒ±nƒ± belirle
                const firstDigit = cardNumber.charAt(0);
                const firstTwoDigits = cardNumber.substr(0, 2);

                if (firstDigit === '4') {
                    document.querySelector('.card-brand.visa').style.display = 'block';
                } else if (firstDigit === '5' && ['1','2','3','4','5'].includes(cardNumber.charAt(1))) {
                    document.querySelector('.card-brand.mastercard').style.display = 'block';
                } else if (firstTwoDigits === '34' || firstTwoDigits === '37') {
                    document.querySelector('.card-brand.amex').style.display = 'block';
                } else {
                    document.querySelector('.card-brand.generic').style.display = 'block';
                }
            }

            // ƒ∞lk y√ºkleme i√ßin generic kart ikonunu g√∂ster
            updateCardBrand('');

            // Son kullanma tarihi formatlamasƒ±
            if (expiryInput) {
                expiryInput.addEventListener('input', function(e) {
                    let value = e.target.value.replace(/\D/g, '');
                    
                    if (value.length > 2) {
                        value = value.substr(0, 2) + '/' + value.substr(2, 2);
                    }
                    
                    e.target.value = value;
                });
            }

            // CVV input kontrol√º
            if (cvvInput) {
                cvvInput.addEventListener('input', function(e) {
                    e.target.value = e.target.value.replace(/\D/g, '').substr(0, 3);
                });
            }

            // IBAN formatlamasƒ±
            const ibanInput = document.getElementById('BankAccountNumber');
            if (ibanInput) {
                ibanInput.addEventListener('input', function(e) {
                    let value = e.target.value.replace(/\D/g, ''); // Sadece rakamlarƒ± al
                    
                    if (value.length > 0 && !value.startsWith('TR')) {
                        value = 'TR' + value;
                    }
                    
                    let formattedValue = '';
                    const groups = ['TR', '00', '0000', '0000', '0000', '0000', '0000', '00'];
                    let currentPos = 0;
                    
                    for (let i = 0; i < groups.length && currentPos < value.length; i++) {
                        if (i === 0) {
                            formattedValue += 'TR';
                            currentPos += 2;
                        } else {
                            const groupLength = groups[i].length;
                            const group = value.substr(currentPos, groupLength);
                            if (group) {
                                if (formattedValue) formattedValue += ' ';
                                formattedValue += group;
                                currentPos += groupLength;
                            }
                        }
                    }
                    
                    e.target.value = formattedValue;
                });

                // IBAN doƒürulama
                ibanInput.addEventListener('blur', function(e) {
                    const iban = e.target.value.replace(/\s/g, '');
                    if (iban && !isValidIBANFormat(iban)) {
                        alert('L√ºtfen ge√ßerli bir IBAN giriniz.');
                        e.target.value = '';
                    }
                });
            }

            function isValidIBANFormat(iban) {
                const ibanRegex = /^TR\d{24}$/;
                return ibanRegex.test(iban);
            }

            // Hediye kartƒ± kodu formatlamasƒ±
            const giftCardInput = document.getElementById('GiftCardCode');
            if (giftCardInput) {
                giftCardInput.addEventListener('input', function(e) {
                    let value = e.target.value.replace(/[^A-Z0-9]/g, '').toUpperCase();
                    let formattedValue = '';
                    
                    for (let i = 0; i < value.length && i < 16; i++) {
                        if (i > 0 && i % 4 === 0) {
                            formattedValue += '-';
                        }
                        formattedValue += value[i];
                    }
                    
                    e.target.value = formattedValue;
                });

                // Hediye kartƒ± kodu doƒürulama
                giftCardInput.addEventListener('blur', function(e) {
                    const code = e.target.value;
                    if (code && !isValidGiftCardFormat(code)) {
                        alert('L√ºtfen ge√ßerli bir hediye kartƒ± kodu giriniz.');
                        e.target.value = '';
                    }
                });
            }

            function isValidGiftCardFormat(code) {
                const giftCardRegex = /^[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}$/;
                return giftCardRegex.test(code);
            }

            // Form g√∂nderilmeden √∂nce validasyon
            form.addEventListener('submit', function(e) {
                const selectedMethod = paymentMethodSelect.value;
                let isValid = true;

                if (selectedMethod === 'CreditCard') {
                    if (!cardNumberInput.value || cardNumberInput.value.replace(/\s/g, '').length < 16) {
                        alert('L√ºtfen ge√ßerli bir kredi kartƒ± numarasƒ± giriniz.');
                        isValid = false;
                    }
                    if (!expiryInput.value || expiryInput.value.length < 5) {
                        alert('L√ºtfen ge√ßerli bir son kullanma tarihi giriniz.');
                        isValid = false;
                    }
                    if (!cvvInput.value || cvvInput.value.length < 3) {
                        alert('L√ºtfen ge√ßerli bir CVV giriniz.');
                        isValid = false;
                    }
                }

                if (selectedMethod === 'BankTransfer') {
                    const iban = ibanInput.value.replace(/\s/g, '');
                    if (!isValidIBANFormat(iban)) {
                        alert('L√ºtfen ge√ßerli bir IBAN giriniz.');
                        isValid = false;
                    }
                }

                if (selectedMethod === 'GiftCard') {
                    const code = giftCardInput.value;
                    if (!isValidGiftCardFormat(code)) {
                        alert('L√ºtfen ge√ßerli bir hediye kartƒ± kodu giriniz.');
                        isValid = false;
                    }
                }

                if (!isValid) {
                    e.preventDefault();
                }
            });
        });
    </script>
} 